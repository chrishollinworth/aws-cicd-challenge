AWSTemplateFormatVersion: "2010-09-09"
Description: Account Based Template

Parameters:
  ExternalSourceIP:
    Type: String
    Description: Source IP to allow access to Load Balancer and Public EC2 Instance
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP address of the form x.x.x.x.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
  LatestAmiId:
    Description: Latest Amazon Machine Image ID for Amazon Linux 2
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  Environment:
    Description: Enviroment for stack
    Type: String
    Default: "Development"
  S3BucketName:
    Description: S3 Bucket Name
    Type: String

Mappings:
  SubnetConfig:
    Development:
      VPC: "10.0.0.0/16"
      PublicOne: "10.0.0.0/24"
      PublicTwo: "10.0.1.0/24"
      PrivateOne: "10.0.2.0/24"
      PrivateTwo: "10.0.3.0/24"
    Staging:
      VPC: "10.1.0.0/16"
      PublicOne: "10.1.0.0/24"
      PublicTwo: "10.1.1.0/24"
      PrivateOne: "10.1.2.0/24"
      PrivateTwo: "10.1.3.0/24"
    Production:
      VPC: "10.2.0.0/16"
      PublicOne: "10.2.0.0/24"
      PublicTwo: "10.2.1.0/24"
      PrivateOne: "10.2.2.0/24"
      PrivateTwo: "10.2.3.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", !Ref Environment, "VPC"]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Public Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join
            - ""
            - - !Ref ExternalSourceIP
              - "/0"
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSecurityGroup
      GroupDescription: Allow HTTP Only.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join
            - ""
            - - !Ref ExternalSourceIP
              - "/0"
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: InstanceSecurityGroup
      GroupDescription: Allow HTTP from ALBSecurityGroup.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", !Ref Environment, "PrivateOne"]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", !Ref Environment, "PrivateTwo"]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", !Ref Environment, "PublicOne"]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", !Ref Environment, "PublicTwo"]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  InstanceKeyPair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Sub "${Environment}KeyPair"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref "InstanceType"
      SecurityGroupIds:
        - !Ref PrivateInstanceSecurityGroup
      SubnetId: !Ref PrivateSubnet1
      KeyName: !Ref InstanceKeyPair
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install nginx1 -y
          sudo systemctl enable nginx
          sudo systemctl start nginx
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:GetObject"
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref S3Bucket
                    - /*
                Effect: Allow
          PolicyName: AuthenticatedS3GetObjects

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RootRole

  S3Bucket:
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  S3GatewayEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub arn:aws:s3:::amazonlinux.${AWS::Region}.amazonaws.com/*
              - !Sub arn:aws:s3:::amazonlinux-2-repos-${AWS::Region}/*
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VPC

  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref "InstanceType"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install nginx1 -y
          sudo systemctl enable nginx
          sudo systemctl start nginx
      KeyName: !Ref InstanceKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref PublicInstanceSecurityGroup
          SubnetId:
            Ref: "PublicSubnet1"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Sub "EC2TargetGroup${Environment}"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      Targets:
        - Id: !Ref PrivateEC2Instance
          Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
    DependsOn: InternetGateway
